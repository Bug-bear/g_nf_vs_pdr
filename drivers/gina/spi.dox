/**
\defgroup SPI SPI

\brief Driver for the SPI bus.

This driver can be used in two modes:
- When ISR_SPI is defined, the driver enables the USCI_A0 RX/TX interrupt by
  setting the corresponding bit in IE2. When it sends a byte, the driver waits
  for an interrupt to signal that the byte was sent correctly before feeding
  the USCI_A0 module with next next byte.
  Because the driver itself expects interrupts, you can not call any of these
  functions in interrupt mode, since you can not get interrupted in that mode.
  If you're very concerned about timing (e.g. you're using 15.4e), I recommend
  you use the second mode.
- When ISR_SPI is *not* defined, this driver does not use interrupts. Instead,
  after putting a byte in the TX buffer, the driver busy waits (i.e. the CPU
  is active) while waiting for the UCA0RXIFG bit in IFG2 to set. Once that
  happens, the driver manually clears that bit and writes the next byte in the
  TX buffer.
  While this means the CPU is active throughout the transmission and can not do
  anything else, it also means the execution is perfectly deterministic if the 
  initial function is called from ISR. Hence the recommended use of that mode
  when using IEEE802.15.4e.
  
\author Thomas Watteyne <watteyne@eecs.berkeley.edu>, August 2010
*/